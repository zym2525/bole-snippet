{
  "快速生成组件": {
    "prefix": "vue3-component",
    "body": [
      "<template>",
      "  <div></div>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "})",
      "",
      "type Props = {",
      "",
      "}",
      "",
      "const props = withDefaults(defineProps<Props>(), {",
      "",
      "})",
      "",
      "</script>",
      "  ",
      "<style lang=\"scss\" scoped>",
      "@use '@/style/common.scss' as *;",
      "",
      "</style>",
      "  ",
      ""
    ],
    "description": ""
  },
  "快速带table的页面": {
    "prefix": "vue3-table-page",
    "body": [
      "<template>",
      "  <LoadingLayout :loading=\"state.loading\">",
      "    <AppContainer>",
      "      <ProTableQueryFilterBar @on-reset=\"handleReset\">",
      "        <template #query>",
      "          <!-- SearchInput如果需要 必须放在所有的query的最后面 -->",
      "          <div class=\"query-filter-list-item\">",
      "            <SearchInput",
      "              v-model=\"state.keyword\"",
      "              style=\"width: 200px\"",
      "              placeholder=\"角色名称\"",
      "              @on-click-search=\"getList\"",
      "            >",
      "            </SearchInput>",
      "          </div>",
      "        </template>",
      "        <template #btn>",
      "          <el-button",
      "            v-if=\"checkSubModuleItemShow('pageButton', 'addBtn')\"",
      "            @click=\"openDialog()\"",
      "            icon=\"Plus\"",
      "            type=\"primary\"",
      "            >新增</el-button",
      "          >",
      "        </template>",
      "      </ProTableQueryFilterBar>",
      "      <ProTableV2",
      "        :tableData=\"tableData\"",
      "        :showPagination=\"state.total !== 0\"",
      "        :pagination-props=\"{",
      "          total: state.total,",
      "          currentPage: state.pageIndex,",
      "          pageSize: state.pageSize,",
      "        }\"",
      "        :columns=\"column\"",
      "        :operationBtns=\"operationBtns\"",
      "        @getDataSource=\"getList\"",
      "        @update:page-size=\"(val) => (state.pageSize = val)\"",
      "      >",
      "        <template #columns=\"{ row, column }\">",
      "          <template v-if=\"column.property === 'roleType'\">",
      "            <div class=\"pre\">{{ row[column.property] }}</div>",
      "          </template>",
      "          <template v-else-if=\"column.property === 'note'\">",
      "            <div class=\"pre\">{{ row[column.property] }}</div>",
      "          </template>",
      "        </template>",
      "      </ProTableV2>",
      "    </AppContainer>",
      "  </LoadingLayout>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import {",
      "  ProTableQueryFilterBar,",
      "  OperationBtnType,",
      "  ProTableV2,",
      "  SearchInput,",
      "  LoadingLayout,",
      "  AppContainer,",
      "} from '@bole-core/components';",
      "import { useAccess } from '@/hooks';",
      "import { useReset } from '@bole-core/core';",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "});",
      "",
      "const operationBtnMap: Record<string, OperationBtnType> = {",
      "  /**",
      "   * 键值名为encode",
      "   */",
      "  editBtn: { emits: { onClick: (role) => openDialog(role) } },",
      "};",
      "",
      "const { checkSubModuleItemShow, column, operationBtns } = useAccess({",
      "  operationBtnMap,",
      "});",
      "",
      "const BaseState = {",
      "  loading: true,",
      "  pageSize: 40,",
      "  pageIndex: 1,",
      "  total: 0,",
      "  keyword: '',",
      "};",
      "",
      "const state = reactive({ ...BaseState });",
      "",
      "const tableData = ref([]);",
      "",
      "onMounted(async () => {",
      "  await getList();",
      "  state.loading = false;",
      "});",
      "",
      "//记得改方法名(选择方法名按f2) 改了删掉注释",
      "async function getList(pageIndex = 1) {",
      "  try {",
      "    //替换为请求方法",
      "    await new Promise(() => {});",
      "  } catch (error) {}",
      "}",
      "const handleReset = useReset(state, BaseState, getList);",
      "function openDialog(row?: any) {",
      "  console.log('row: ', row);",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "@use '@/style/common.scss' as *;",
      "</style>",
      ""
    ],
    "description": ""
  }
}
