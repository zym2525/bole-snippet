{
  "快速生成组件": {
    "prefix": "vue3-component",
    "body": [
      "<template>",
      "  <div></div>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "})",
      "",
      "type Props = {",
      "",
      "}",
      "",
      "const props = withDefaults(defineProps<Props>(), {",
      "",
      "})",
      "",
      "</script>",
      "  ",
      "<style lang=\"scss\" scoped>",
      "@use '@/style/common.scss' as *;",
      "",
      "</style>",
      "  ",
      ""
    ],
    "description": ""
  },
  "快速带table的页面": {
    "prefix": "vue3-table-page",
    "body": [
      "<template>",
      "  <LoadingLayout :loading=\"state.loading\">",
      "    <AppContainer>",
      "      <ProTableQueryFilterBar @on-reset=\"handleReset\">",
      "        <template #query>",
      "          <!-- SearchInput如果需要 必须放在所有的query的最后面 -->",
      "          <div class=\"query-filter-list-item\">",
      "            <SearchInput",
      "              v-model=\"state.keyword\"",
      "              style=\"width: 200px\"",
      "              placeholder=\"角色名称\"",
      "              @on-click-search=\"getList\"",
      "            >",
      "            </SearchInput>",
      "          </div>",
      "        </template>",
      "        <template #btn>",
      "          <el-button",
      "            v-if=\"checkSubModuleItemShow('pageButton', 'addBtn')\"",
      "            @click=\"openDialog()\"",
      "            icon=\"Plus\"",
      "            type=\"primary\"",
      "            >新增</el-button",
      "          >",
      "        </template>",
      "      </ProTableQueryFilterBar>",
      "      <ProTableV2",
      "        :tableData=\"tableData\"",
      "        :showPagination=\"state.total !== 0\"",
      "        :pagination-props=\"{",
      "          total: state.total,",
      "          currentPage: state.pageIndex,",
      "          pageSize: state.pageSize,",
      "        }\"",
      "        :columns=\"column\"",
      "        :operationBtns=\"operationBtns\"",
      "        @getDataSource=\"getList\"",
      "        @update:page-size=\"(val) => (state.pageSize = val)\"",
      "      >",
      "        <template #columns=\"{ row, column }\">",
      "          <template v-if=\"column.property === 'roleType'\">",
      "            <div class=\"pre\">{{ row[column.property] }}</div>",
      "          </template>",
      "          <template v-else-if=\"column.property === 'note'\">",
      "            <div class=\"pre\">{{ row[column.property] }}</div>",
      "          </template>",
      "        </template>",
      "      </ProTableV2>",
      "    </AppContainer>",
      "  </LoadingLayout>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import {",
      "  ProTableQueryFilterBar,",
      "  OperationBtnType,",
      "  ProTableV2,",
      "  SearchInput,",
      "  LoadingLayout,",
      "  AppContainer,",
      "} from '@bole-core/components';",
      "import { useAccess } from '@/hooks';",
      "import { useReset } from '@bole-core/core';",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "});",
      "",
      "const operationBtnMap: Record<string, OperationBtnType> = {",
      "  /**",
      "   * 键值名为encode",
      "   */",
      "  editBtn: { emits: { onClick: (role) => openDialog(role) } },",
      "};",
      "",
      "const { checkSubModuleItemShow, column, operationBtns } = useAccess({",
      "  operationBtnMap,",
      "});",
      "",
      "const BaseState = {",
      "  loading: true,",
      "  pageSize: 40,",
      "  pageIndex: 1,",
      "  total: 0,",
      "  keyword: '',",
      "};",
      "",
      "const state = reactive({ ...BaseState });",
      "",
      "const tableData = ref([]);",
      "",
      "onMounted(async () => {",
      "  await getList();",
      "  state.loading = false;",
      "});",
      "",
      "//记得改方法名(选择方法名按f2) 改了删掉注释",
      "async function getList(pageIndex = 1) {",
      "  try {",
      "    //替换为请求方法",
      "    await new Promise(() => {});",
      "  } catch (error) {}",
      "}",
      "const handleReset = useReset(state, BaseState, getList);",
      "function openDialog(row?: any) {",
      "  console.log('row: ', row);",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "@use '@/style/common.scss' as *;",
      "</style>",
      ""
    ],
    "description": ""
  },
  "快速生成emit": {
    "prefix": "vue3-emit",
    "body": [
      "const emit = defineEmits<{",
      "  (e: 'change', id: number): void",
      "}>()"
    ],
    "description": ""
  },
  "快速带form的dialog": {
    "prefix": "vue3-form-dialog",
    "body": [
      "<template>",
      "  <ProDialog",
      "    :title=\"innerForm.title\"",
      "    v-model=\"innerVisible\"",
      "    @close=\"onDialogClose\"",
      "    destroy-on-close",
      "    draggable",
      "  >",
      "    <ProForm :rules=\"rules\" :model=\"innerForm\" ref=\"dialogForm\" label-width=\"90px\">",
      "      <ProFormItem label=\"名称\" prop=\"name\">",
      "        <el-input placeholder=\"请输入名称\" v-model.trim=\"innerForm.name\"></el-input>",
      "      </ProFormItem>",
      "    </ProForm>",
      "    <template #footer>",
      "      <span class=\"dialog-footer\">",
      "        <el-button @click=\"emit('onCancel')\">取 消</el-button>",
      "        <el-button type=\"primary\" @click=\"handleConfirm\">确 定</el-button>",
      "      </span>",
      "    </template>",
      "  </ProDialog>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { FormRules, FormInstance } from 'element-plus';",
      "import { ProDialog, ProForm, ProFormItem } from '@bole-core/components';",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "});",
      "",
      "type Props = {",
      "  modelValue: boolean;",
      "  form: {",
      "    name: string;",
      "    title: string;",
      "  };",
      "};",
      "",
      "const props = withDefaults(defineProps<Props>(), {",
      "  modelValue: false,",
      "});",
      "",
      "const emit = defineEmits<{",
      "  (e: 'update:modelValue', value: boolean): void;",
      "  (e: 'update:form', value: Props['form']): void;",
      "  (e: 'onConfirm'): void;",
      "  (e: 'onCancel'): void;",
      "}>();",
      "",
      "const dialogForm = ref<FormInstance>();",
      "",
      "const innerVisible = computed({",
      "  get() {",
      "    return props.modelValue;",
      "  },",
      "  set(val) {",
      "    emit('update:modelValue', val);",
      "  },",
      "});",
      "",
      "const innerForm = computed({",
      "  get() {",
      "    return props.form;",
      "  },",
      "  set(val) {",
      "    emit('update:form', val);",
      "  },",
      "});",
      "",
      "const rules = reactive<FormRules>({",
      "  name: [{ required: true, message: '请输入名称', trigger: 'blur' }],",
      "});",
      "",
      "function onDialogClose() {",
      "  if (!dialogForm.value) return;",
      "  dialogForm.value.resetFields();",
      "}",
      "",
      "function handleConfirm() {",
      "  if (!dialogForm.value) return;",
      "  dialogForm.value.validate((valid) => {",
      "    if (valid) {",
      "      emit('onConfirm');",
      "    } else {",
      "      return false;",
      "    }",
      "  });",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "@use '@/style/common.scss' as *;",
      "</style>",
      ""
    ],
    "description": ""
  },
  "快速带form的相关数据": {
    "prefix": "vue3-form-state",
    "body": [
      "// form",
      "const dialogEditFormVisible = ref(false);",
      "const BaseFormData = {",
      "  name: '',",
      "  title: '',",
      "};",
      "const editForm = reactive({ ...BaseFormData });",
      "const currentDialogModule = ref({});"
    ],
    "description": ""
  },
  "快速生成页面": {
    "prefix": "vue3-page",
    "body": [
      "<template>",
      "  <LoadingLayout :loading=\"state.loading\">",
      "    <AppContainer>",
      "      <ProTableQueryFilterBar>",
      "        <template #query>",
      "          <div class=\"query-filter-list-item\"></div>",
      "        </template>",
      "        <template #btn>",
      "          <el-button type=\"primary\"> 查询 </el-button>",
      "        </template>",
      "      </ProTableQueryFilterBar>",
      "    </AppContainer>",
      "  </LoadingLayout>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ProTableQueryFilterBar } from '@/components/ProTable';",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "});",
      "",
      "const BaseState = {",
      "  loading: true,",
      "  pageSize: 40,",
      "  pageIndex: 1,",
      "  total: 0,",
      "  keyword: '',",
      "};",
      "",
      "const state = reactive({ ...BaseState });",
      "",
      "onMounted(() => {",
      "  state.loading = false;",
      "});",
      "</script>",
      ""
    ],
    "description": ""
  },
  "快速通用的页dialog": {
    "prefix": "vue3-general-dialog",
    "body": [
      "<template>",
      "  <ProDialog title=\"innerForm.title\" v-model=\"innerVisible\" destroy-on-close draggable>",
      "    <template #footer>",
      "      <span class=\"dialog-footer\">",
      "        <el-button @click=\"emit('onCancel')\">取 消</el-button>",
      "        <el-button @click=\"emit('onConfirm')\">确 定</el-button>",
      "      </span>",
      "    </template>",
      "  </ProDialog>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ProDialog } from '@bole-core/components';",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "});",
      "",
      "type Props = {",
      "  modelValue: boolean;",
      "};",
      "",
      "const props = withDefaults(defineProps<Props>(), {",
      "  modelValue: false,",
      "});",
      "",
      "const emit = defineEmits<{",
      "  (e: 'update:modelValue', value: boolean): void;",
      "  (e: 'onCancel'): void;",
      "  (e: 'onConfirm'): void;",
      "}>();",
      "",
      "const innerVisible = computed({",
      "  get() {",
      "    return props.modelValue;",
      "  },",
      "  set(val) {",
      "    emit('update:modelValue', val);",
      "  },",
      "});",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "@use '@/style/common.scss' as *;",
      "</style>",
      ""
    ],
    "description": ""
  },
  "快速生成带table的dialog": {
    "prefix": "vue3-table-dialog",
    "body": [
      "<template>",
      "  <ProDialog title=\"innerForm.title\" v-model=\"innerVisible\" destroy-on-close draggable>",
      "    <ProTableV2",
      "      :tableData=\"innerState.tableData\"",
      "      :showPagination=\"innerState.total !== 0\"",
      "      :pagination-props=\"{",
      "        total: innerState.total,",
      "        currentPage: innerState.pageIndex,",
      "        pageSize: innerState.pageSize,",
      "      }\"",
      "      :columns=\"column\"",
      "      @getDataSource=\"getList\"",
      "      @update:page-size=\"(val) => (innerState.pageSize = val)\"",
      "    >",
      "    </ProTableV2>",
      "    <template #footer>",
      "      <span class=\"dialog-footer\">",
      "        <el-button @click=\"emit('onCancel')\">取 消</el-button>",
      "        <el-button @click=\"emit('onConfirm')\">取 消</el-button>",
      "      </span>",
      "    </template>",
      "  </ProDialog>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ProDialog, ProTableV2 } from '@bole-core/components';",
      "",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}',",
      "});",
      "",
      "type Props = {",
      "  modelValue: boolean;",
      "  getList: (pageIndex: number) => Promise<any>;",
      "  state: {",
      "    pageSize: number;",
      "    pageIndex: number;",
      "    total: number;",
      "    tableData: API.GetParkMeetingRoomRecordList[];",
      "  };",
      "};",
      "",
      "const props = withDefaults(defineProps<Props>(), {",
      "  modelValue: false,",
      "});",
      "",
      "const emit = defineEmits<{",
      "  (e: 'update:modelValue', value: boolean): void;",
      "  (e: 'update:state', value: Props['state']): void;",
      "  (e: 'onCancel'): void;",
      "  (e: 'onConfirm'): void;",
      "}>();",
      "",
      "const column: API.CustomModuleColumnDto[] = [];",
      "",
      "const innerVisible = computed({",
      "  get() {",
      "    return props.modelValue;",
      "  },",
      "  set(val) {",
      "    emit('update:modelValue', val);",
      "  },",
      "});",
      "",
      "const innerState = computed({",
      "  get() {",
      "    return props.state;",
      "  },",
      "  set(val) {",
      "    emit('update:state', val);",
      "  },",
      "});",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "@use '@/style/common.scss' as *;",
      "</style>",
      ""
    ],
    "description": ""
  }
}
